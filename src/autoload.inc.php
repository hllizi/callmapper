<?php
// @codingStandardsIgnoreFile
// @codeCoverageIgnoreStart
// this is an autogenerated file - do not edit
spl_autoload_register(
    function($class) {
        static $classes = null;
        if ($classes === null) {
            $classes = array(
                'hllizi\\callmapper\\callmapiterator' => '/CallMapIterator.php',
                'hllizi\\callmapper\\callmapper' => '/CallMapper.php',
                'hllizi\\callmapper\\monoid\\arraymonoid' => '/Monoid/ArrayMonoid.php',
                'hllizi\\callmapper\\monoid\\boolmonoid' => '/Monoid/BoolMonoid.php',
                'hllizi\\callmapper\\monoid\\monoidfactory' => '/Monoid/MonoidFactory.php',
                'hllizi\\callmapper\\monoid\\monoidinterface' => '/Monoid/MonoidInterface.php',
                'hllizi\\callmapper\\monoid\\numericmonoid' => '/Monoid/NumericMonoid.php',
                'hllizi\\callmapper\\monoid\\stringmonoid' => '/Monoid/StringMonoid.php',
                'hllizi\\phpmonads\\arraymonad' => '/../vendor/hllizi/phpmonads/src/ArrayMonad.php',
                'hllizi\\phpmonads\\continuationmonad' => '/../vendor/hllizi/phpmonads/src/ContinuationMonad.php',
                'hllizi\\phpmonads\\illicitvalueexception' => '/../vendor/hllizi/phpmonads/src/IllicitValueException.php',
                'hllizi\\phpmonads\\incompatibletypeexception' => '/../vendor/hllizi/phpmonads/src/IncompatibleTypeException.php',
                'hllizi\\phpmonads\\maybemonad' => '/../vendor/hllizi/phpmonads/src/MaybeMonad.php',
                'hllizi\\phpmonads\\monadinterface' => '/../vendor/hllizi/phpmonads/src/MonadInterface.php',
                'hllizi\\phpmonads\\monadtrait' => '/../vendor/hllizi/phpmonads/src/MonadTrait.php'
            );
        }
        $cn = strtolower($class);
        if (isset($classes[$cn])) {
            require __DIR__ . $classes[$cn];
        }
    },
    true,
    false
);
// @codeCoverageIgnoreEnd
